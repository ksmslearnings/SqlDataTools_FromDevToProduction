/*
Deployment script for ProductDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar PriceDatabase "PriceDatabase"
:setvar DatabaseName "ProductDatabase"
:setvar DefaultFilePrefix "ProductDatabase"
:setvar DefaultDataPath "D:\SQLServer2017DeveloperEdition\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\SQLServer2017DeveloperEdition\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 60 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[ProductCategory]...';


GO
CREATE TABLE [dbo].[ProductCategory] (
    [ProductCategoryId]   BIGINT         IDENTITY (1, 1) NOT NULL,
    [ProductCategoryName] NVARCHAR (50)  NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [CreatedBy]           NVARCHAR (100) NOT NULL,
    [ModifiedDate]        DATETIME       NULL,
    [ModifiedBy]          BIGINT         NULL,
    CONSTRAINT [PK_ProductCategory] PRIMARY KEY CLUSTERED ([ProductCategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[ProductList]...';


GO
CREATE TABLE [dbo].[ProductList] (
    [ProductId]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [ProductPriceId]    BIGINT         NOT NULL,
    [ProductName]       NVARCHAR (100) NOT NULL,
    [ProductCategoryId] BIGINT         NOT NULL,
    [CreatedDate]       DATETIME       NOT NULL,
    [CreatedBy]         NVARCHAR (100) NOT NULL,
    [ModifiedDate]      DATETIME       NULL,
    [ModifiedBy]        NVARCHAR (50)  NULL,
    CONSTRAINT [PK_ProductList] PRIMARY KEY CLUSTERED ([ProductId] ASC)
);


GO
PRINT N'Creating [dbo].[Synonym_PriceDatabase_PriceTable]...';


GO
CREATE SYNONYM [dbo].[Synonym_PriceDatabase_PriceTable] FOR [$(PriceDatabase)].[dbo].[ProductPrice];


GO
PRINT N'Creating [dbo].[TestView]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[TestView]
	AS 
	select 
	p.ProductId,
	p.ProductName,
	PriceTableSynonym.Price,
	p.ProductCategoryId,
	pc.ProductCategoryName,
	p.CreatedDate,
	p.CreatedBy,
	p.ProductPriceId	
	from ProductList p 
	inner join ProductCategory pc
		on p.ProductCategoryId = pc.ProductCategoryId
	inner join Synonym_PriceDatabase_PriceTable PriceTableSynonym
		on p.ProductPriceId = PriceTableSynonym.ProductPriceId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[GetAllProductDetails]...';


GO
-- =============================================
-- Author:		Kunal Sehgal - Sample for SSDT tools
-- Create date: 28 July 2020<Create Date,,>
-- Description:	Get All products aong with their prices information
-- =============================================
CREATE PROCEDURE GetAllProductDetails
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select 
	p.ProductId,
	p.ProductName,
	PriceTableSynonym.Price,
	p.ProductCategoryId,
	pc.ProductCategoryName,
	p.CreatedDate,
	p.CreatedBy,
	p.ProductPriceId	
	from ProductList p 
	inner join ProductCategory pc
		on p.ProductCategoryId = pc.ProductCategoryId
	inner join Synonym_PriceDatabase_PriceTable PriceTableSynonym
		on p.ProductPriceId = PriceTableSynonym.ProductPriceId

END
GO
PRINT N'Creating [dbo].[GetAllProductDetailsV1]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- =============================================
-- Author:		Kunal Sehgal - Sample for SSDT tools
-- Create date: 28 July 2020<Create Date,,>
-- Description:	Get All products aong with their prices information
-- =============================================
CREATE PROCEDURE GetAllProductDetailsV1
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select 
	p.ProductId,
	p.ProductName,
	PriceTableSynonym.Price,
	p.ProductCategoryId,
	pc.ProductCategoryName,
	p.CreatedDate,
	p.CreatedBy,
	p.ProductPriceId	
	from ProductList p 
	inner join ProductCategory pc
		on p.ProductCategoryId = pc.ProductCategoryId
	inner join Synonym_PriceDatabase_PriceTable PriceTableSynonym
		on p.ProductPriceId = PriceTableSynonym.ProductPriceId

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[GetAllProductsByCategory]...';


GO
-- =============================================
-- Author:		Kunal Sehgal - Sample for SSDT tools
-- Create date: 28 July 2020<Create Date,,>
-- Description:	Get All products aong with their prices information
-- =============================================
CREATE PROCEDURE GetAllProductsByCategory(@categoryId bigint)
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select 
	p.ProductId,
	p.ProductName,
	PriceTableSynonym.Price,
	p.ProductCategoryId,
	pc.ProductCategoryName,
	p.CreatedDate,
	p.CreatedBy,
	p.ProductPriceId	
	from ProductList p 
	inner join ProductCategory pc
		on p.ProductCategoryId = pc.ProductCategoryId
	inner join Synonym_PriceDatabase_PriceTable PriceTableSynonym
		on p.ProductPriceId = PriceTableSynonym.ProductPriceId
	
	where p.ProductCategoryId=@categoryId

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Print 'Insert Master Data in Product Database - Started'

declare @rowcount int = (select count(1) from [dbo].[ProductCategory])
if @rowcount <> 3
begin

Truncate table [dbo].[ProductCategory]

INSERT INTO [dbo].[ProductCategory]
           ([ProductCategoryName]
           ,[CreatedDate]
           ,[CreatedBy]
           ,[ModifiedDate]
           ,[ModifiedBy])
     VALUES        
		   ('Phone',getdate(),'Kunal Sehgal',null,null),
		   ('TV',getdate(),'Kunal Sehgal',null,null),
		   ('Sports',getdate(),'Kunal Sehgal',null,null)
end



            
select @rowcount = count(1) from [dbo].[ProductCategory]
if @rowcount <> 9
begin

truncate table [dbo].[ProductList]

INSERT INTO [dbo].[ProductList]
           ([ProductPriceId]
           ,[ProductName]
           ,[ProductCategoryId]
           ,[CreatedDate]
           ,[CreatedBy]
           ,[ModifiedDate]
           ,[ModifiedBy])
     VALUES
           (1,'SamsonMobile X10',1,getdate(),'Kunal Sehgal',null,null),
		   (2,'NokEAA N98',1,getdate(),'Kunal Sehgal',null,null),
		   (3,'SieErricson M10',1,getdate(),'Kunal Sehgal',null,null),

		   (4,'SOMAS LED TV',2,getdate(),'Kunal Sehgal',null,null),
		   (5,'NIKOS LCD HD',2,getdate(),'Kunal Sehgal',null,null),
		   (6,'Westwild LED XL',2,getdate(),'Kunal Sehgal',null,null),

		   (7,'HandBall',3,getdate(),'Kunal Sehgal',null,null),
		   (8,'Jumping Jack Trainer',3,getdate(),'Kunal Sehgal',null,null),
		   (9,'Wrist Strengthner',3,getdate(),'Kunal Sehgal',null,null)


end
GO

Print 'Insert Master Data in Product Database - Completed'

Print '********************************************************************'
Print '********************************************************************'

Print 'Call Main SQL Script for Current Release - Started'

--STEP 1
--To be Run in August 2020 Release Only
-- This is for Current Release for demonstration
INSERT INTO [dbo].[ProductCategory]
           ([ProductCategoryName]
           ,[CreatedDate]
           ,[CreatedBy]
           ,[ModifiedDate]
           ,[ModifiedBy])
     VALUES        
		   ('Natural Products',getdate(),'Kunal Sehgal',null,null)

GO

--STEP 2
-- Dummy Script for Demonstration which can be handling any DMLs required in Release.
select top 1 * from ProductCategory
GO



Print 'Call Main SQL Script for Current Release - Completed'


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
